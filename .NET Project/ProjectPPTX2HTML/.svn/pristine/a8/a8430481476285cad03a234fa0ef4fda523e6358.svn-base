using System;
using System.IO;
using System.Collections.Generic;
using ClearSlideLibrary.Dom;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Presentation;
using Path = System.IO.Path;

namespace ClearSlideLibrary.PPTBuilder
{
    public class PPTPresenationBuilder
    {
        public SlideSize SlideSizes { get; set; }

        public int getSlideWidth()
        {
            if (SlideSizes == null || SlideSizes.Cx == 0)
            {
                return 1;
            }
            else if (SlideSizes.Cx < Globals.LEAST_COMMON_MULTIPLE_100_254)
            {
                return Convert.ToInt32((double)(Globals.LEAST_COMMON_MULTIPLE_100_254) / SlideSizes.Cx);
            }
            else
            {
                return Convert.ToInt32(SlideSizes.Cx / (double)(Globals.LEAST_COMMON_MULTIPLE_100_254));
            }
        }

        public int getSlideHeight()
        {
            if (SlideSizes == null || SlideSizes.Cy == 0)
            {
                return 1;
            }
            else if (SlideSizes.Cy < Globals.LEAST_COMMON_MULTIPLE_100_254)
            {
                return Convert.ToInt32((double)(Globals.LEAST_COMMON_MULTIPLE_100_254) / SlideSizes.Cy);
            }
            else
            {
                return Convert.ToInt32(SlideSizes.Cy / (double)(Globals.LEAST_COMMON_MULTIPLE_100_254));
            }
        }


        public List<PPTSlide> GetPPTSlides(string pathToPresentation)
        {
            string fileFromPath = Path.GetFileName(pathToPresentation);
            var inf = new FileInfo(fileFromPath);
            string fileName = Path.GetFileNameWithoutExtension(inf.Name);

            string dir = Path.GetDirectoryName(Path.GetDirectoryName(Environment.CurrentDirectory));
            string destDir = Path.Combine(dir, Globals.STORAGE_DIR);

            PresentationDocument presentationDocument = null;
            try
            {
                presentationDocument = PresentationDocument.Open(pathToPresentation, false);
                //get the slide sizes.
                Presentation presentation = presentationDocument.PresentationPart.Presentation;
                SlideSizes = presentation.SlideSize;

            }
            catch (Exception ex)
            {
                throw new FileNotFoundException(
                    "PPTPresenationController.Ctor Unable to open Power Point Presentation.Path - "
                    + pathToPresentation, ex.InnerException);
            }
            if (presentationDocument == null)
            {
                throw new ArgumentNullException("Presentation Document missing");
            }


            var pptInteropt = new PPTBackgroundBuilderInterop(pathToPresentation);
            pptInteropt.ExportPresentationImages(destDir);
            pptInteropt = null;
            GC.Collect();

            IEnumerable<SlidePart> slideParts = GetPresentationSlideParts(presentationDocument);
            List<PPTSlide> pptSlides = GetPPTSlidesFromParts(slideParts, presentationDocument.PresentationPart.Presentation.DefaultTextStyle, fileName);



            return pptSlides;
        }

        private IEnumerable<SlidePart> GetPresentationSlideParts(PresentationDocument presentationDocument)
        {
            var slideParts = new List<SlidePart>();

            PresentationPart presentationPart = presentationDocument.PresentationPart;
            if (presentationPart != null && presentationPart.Presentation != null)
            {
                Presentation presentation = presentationPart.Presentation;

                if (presentation.SlideIdList != null)
                {
                    foreach (var slideId in presentation.SlideIdList.Elements<SlideId>())
                    {
                        try
                        {
                            slideParts.Add((SlidePart)presentationPart.GetPartById(slideId.RelationshipId));
                        }
                        catch (Exception ex)
                        {
                            throw new ArgumentNullException("Unable to add slide part." + ex.InnerException);
                        }
                    }
                }
            }

            return slideParts;
        }

        private List<PPTSlide> GetPPTSlidesFromParts(IEnumerable<SlidePart> slideParts, DefaultTextStyle defaultTextStyle, string fileName)
        {
            var pptSlides = new List<PPTSlide>();
            int slideIndex = 1;

            foreach (SlidePart slidePart in slideParts)
            {
                var pptSlide = new PPTSlide(slidePart, slideIndex++, defaultTextStyle, fileName);
                pptSlides.Add(pptSlide);
            }

            return pptSlides;
        }
    }
}