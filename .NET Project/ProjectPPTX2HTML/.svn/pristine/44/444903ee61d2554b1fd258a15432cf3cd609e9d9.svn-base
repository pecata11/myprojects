using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClearSlideLibrary.Dom.PPTTexts
{
    public class PPTParagraph
    {
        public List<PPTRunProperties> RunPropList { get; set; }
        public string Align { get; set; }//ctr, l, r, just, dist, thai, justLow
        public string FontAlign { get; set; }//auto, b, base, ctr, t
        public Int32 Indent { get; set; }
        public Int32 Level { get; set; }
        public Int32 marginLeft { get; set; }
        public Int32 marginRight { get; set; }
        public Int32 defTabSize { get; set; }
        public bool Invisible { get; set; }
        public bool Animatable { get; set; }
        public int Paragraph { get; set; }
        public bool hasBullet { get; set; }
        public bool hasNoBullet { get; set; }
        public PPTRunProperties defaultRunProperties { get; set; }
        public DocumentFormat.OpenXml.Drawing.SpaceAfter spaceAfter { get; set; }
        public DocumentFormat.OpenXml.Drawing.SpaceBefore spaceBefore { get; set; }
        public DocumentFormat.OpenXml.Drawing.LineSpacing lineSpacing { get; set; }


        public int getLineSpacingInPointsFromFont(int fontHeight)
        {
            if (lineSpacing == null)
                return fontHeight;
            if (lineSpacing.SpacingPoints != null)
                return lineSpacing.SpacingPoints.Val;
            if (lineSpacing.SpacingPercent != null)
                return lineSpacing.SpacingPercent.Val * fontHeight / 100000;
            return fontHeight;
        }
        public int getSpaceBeforePoints()
        {
            return getSpacingInPoints(spaceBefore);
        }

        public int getSpaceAfterPoints()
        {
            return getSpacingInPoints(spaceAfter);
        }

        private int getSpacingInPoints(DocumentFormat.OpenXml.Drawing.TextSpacingType spacing)
        {
            if(spacing==null)
                return 0;
            if (spacing.SpacingPoints != null)
                return spacing.SpacingPoints.Val / 100;
            return 0;
        }

        
    }
}
