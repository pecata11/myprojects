using System;
using System.Collections.Generic;
using System.Text;
using DocumentFormat.OpenXml.Drawing;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Presentation;
using ClearSlideLibrary.Dom.PPTTexts;
using Shape = DocumentFormat.OpenXml.Presentation.Shape;
using TextBody = DocumentFormat.OpenXml.Presentation.TextBody;
using DocumentFormat.OpenXml;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;

namespace ClearSlideLibrary.Dom
{
    public class PPTShape : PPTShapeBase
    {
        // contains values of type: slideIndex_shapeId
        public static LinkedList<string> effectShapes = new LinkedList<string>();

        private const int FontPoint = 100;
        private const double RotationIndex = 60000;
        private const int PercentageConstant = 100000;
        private const string PictureBulletDirName = "PictureBullet";

        public Boolean IsText { get; set; }
        public PPTSlide slide { get; set; }
        private PlaceholderShape placeholder;

        // Create a new linked list of strings.
        public LinkedList<PPTParagraph> Texts = new LinkedList<PPTParagraph>();

        public PPTShape(SlidePart slidePart, Shape shape, PPTSlide slide)
            : base()
        {
            this.slide = slide;

            SetShapeVisualProperties(slidePart, shape);
            SetShapeNonVisualProperties(slidePart, shape);
            SetSpecificProperties(slidePart, shape);

        }


        private void SetShapeNonVisualProperties(SlidePart slidePart, Shape shape)
        {

            if (shape.NonVisualShapeProperties.NonVisualDrawingProperties.HyperlinkOnClick != null)

                foreach (HyperlinkRelationship link in slidePart.HyperlinkRelationships)
                {
                    if (link.Id.Equals(shape.NonVisualShapeProperties.NonVisualDrawingProperties.HyperlinkOnClick.Id))
                    {
                        ClickLinkUrl = link.Uri.IsAbsoluteUri ? link.Uri.AbsoluteUri : link.Uri.OriginalString;

                    }
                }
            if (shape.NonVisualShapeProperties.NonVisualDrawingProperties.HyperlinkOnHover != null)
                foreach (HyperlinkRelationship link in slidePart.HyperlinkRelationships)
                {
                    if (link.Id.Equals(shape.NonVisualShapeProperties.NonVisualDrawingProperties.HyperlinkOnHover.Id))
                    {
                        HoverLinkUrl = link.Uri.IsAbsoluteUri ? link.Uri.AbsoluteUri : link.Uri.OriginalString;
                    }
                }

            var nonVisualShapeProp = new PPTNonVisualShapeProp
                                         {
                                             Id = "s1s" + //HARD CODED: we split it into separate HTML files!
                                                  shape.NonVisualShapeProperties.NonVisualDrawingProperties.Id,
                                             Name = shape.LocalName,
                                             Type = "PPTShape"
                                         };
            base.NonVisualShapeProp = nonVisualShapeProp;
        }

        private void SetShapeVisualProperties(SlidePart slidePart, Shape shape)
        {

            if (shape.NonVisualShapeProperties.ApplicationNonVisualDrawingProperties.PlaceholderShape != null)
            {
                placeholder = shape.NonVisualShapeProperties.ApplicationNonVisualDrawingProperties.
                                        PlaceholderShape;
                if (placeholder.Type == null)
                    placeholder.Type = PlaceholderValues.Body;
            }


            base.VisualShapeProp = new PPTVisualPPTShapeProp();
            base.SetSlideLayoutVisualShapeProperties(slidePart, shape);
            if (shape.ShapeProperties.Transform2D != null)
            {
                Int32Value rot = shape.ShapeProperties.Transform2D.Rotation;
                if (rot != null)
                {
                    double degrees = Math.Round(rot / RotationIndex);
                    if (degrees < 0)
                    {
                        degrees = 360 + degrees;
                    }
                    base.VisualShapeProp.Rotate = degrees;
                }

                base.VisualShapeProp.Extents = shape.ShapeProperties.Transform2D.Extents;
                base.VisualShapeProp.Offset = shape.ShapeProperties.Transform2D.Offset;
            }
        }

        private void SetSpecificProperties(SlidePart slidePart, Shape shape)
        {

            IsText = true;
            //Check if this is text
            if (shape.TextBody == null)
            {
                IsText = false;
                return;
            }

            if (shape.TextBody.BodyProperties != null)
            {
                if (shape.TextBody.BodyProperties.Anchor != null)
                    VerticalAlign = shape.TextBody.BodyProperties.Anchor;
                if (shape.TextBody.BodyProperties.GetFirstChild<NormalAutoFit>() != null &&
                    shape.TextBody.BodyProperties.GetFirstChild<NormalAutoFit>().FontScale != null)
                    fontScale = shape.TextBody.BodyProperties.GetFirstChild<NormalAutoFit>().FontScale.Value;

            }

            int index = 0;
            foreach (var paragraph in shape.TextBody.Descendants<Paragraph>())
            {
                var par = new PPTParagraph();
                par.Paragraph = index++;

                par.RunPropList = new List<PPTRunProperties>();

                if (paragraph.ParagraphProperties != null)
                {
                    int level = paragraph.ParagraphProperties.Level == null ?
                               -1 : paragraph.ParagraphProperties.Level.Value;
                    par.Level = level;
                }

                par = SetParagraphProperties(paragraph, par, slidePart);

                bool hasText = false;
                foreach (var obj in paragraph.ChildElements)
                {
                    if (obj.GetType().Equals(typeof(Run)))
                    {
                        Run run = (Run)obj;
                        hasText = true;
                        PPTRunProperties runProp = new PPTRunProperties(par.defaultRunProperties);
                        runProp.Text = run.Text.Text;
                        runProp.SetRunProperties(run.RunProperties, shape, ref effectShapes);
                        runProp.FontSize = Math.Round(fontScale * runProp.FontSize / PercentageConstant);
                        par.RunPropList.Add(runProp);
                    }

                    else if (obj.GetType().Equals(typeof(Field)))
                    {
                        Field run = (Field)obj;
                        hasText = true;
                        PPTRunProperties runProp = new PPTRunProperties(par.defaultRunProperties);
                        runProp.Text = run.Text.Text;
                        runProp.SetRunProperties(run.RunProperties, shape, ref effectShapes);
                        runProp.FontSize = Math.Round(fontScale * runProp.FontSize / PercentageConstant);
                        par.RunPropList.Add(runProp);
                    }

                    else if (obj.GetType().Equals(typeof(Break)))
                    {
                        Break aBreak = (Break)obj;
                        PPTRunProperties runProp = new PPTRunProperties(par.defaultRunProperties);
                        runProp.SetRunProperties(aBreak.RunProperties, shape, ref effectShapes);
                        runProp.FontSize = Math.Round(fontScale * runProp.FontSize / PercentageConstant);
                        runProp.isBreak = true;
                        par.RunPropList.Add(runProp);
                    }
                }
                //This is because when we set paragraph properties we add the bullet to the text runs.
                //If we don't have text it still outputs the bullet character. 
                if (par.bullet != null && hasText)
                {
                    par.RunPropList.Insert(0, par.bullet);
                }
                Texts.AddLast(par);
            }
        }

        private PPTParagraph SetParagraphProperties(Paragraph paragraph, PPTParagraph par, SlidePart slidePart)
        {

            TextListStyleType listStyleType = this.slide.defaultTextStyle;
            if (slide.textStyles != null)
            {
                if (placeholder != null)
                    if (placeholder.Type.Value.Equals(PlaceholderValues.Body)
                        || placeholder.Type.Value.Equals(PlaceholderValues.SubTitle))
                    {
                        listStyleType = slide.textStyles.BodyStyle;
                    }
                    else if (placeholder.Type.Value.Equals(PlaceholderValues.Title)
                            || placeholder.Type.Value.Equals(PlaceholderValues.CenteredTitle))
                    {
                        listStyleType = slide.textStyles.TitleStyle;
                    }
                    else
                        listStyleType = slide.textStyles.OtherStyle;
                //Check what should we add here for all placeholder values. 
                //Should we take it by placeholder value or there is another property?
            }


            TextParagraphPropertiesType baseProperties = getFromTextListStyle(listStyleType, par.Level);
            TextParagraphPropertiesType basePropertiesMaster = getFromTextListStyle(shapeListStyleMaster, par.Level);
            TextParagraphPropertiesType basePropertiesLayout = getFromTextListStyle(shapeListStyleLayout, par.Level);

            par.defaultRunProperties = new PPTRunProperties(slide);


            if (baseProperties != null)
            {
                par = FillParagraphProperties(par, baseProperties, slidePart);
            }
            if (basePropertiesMaster != null)
            {
                par = FillParagraphProperties(par, basePropertiesMaster, slidePart);
            }
            if (basePropertiesLayout != null)
            {
                par = FillParagraphProperties(par, basePropertiesLayout, slidePart);
            }
            if (paragraph.ParagraphProperties != null)
            {
                par = FillParagraphProperties(par, paragraph.ParagraphProperties, slidePart);
            }
            return par;
        }

        private TextParagraphPropertiesType getFromTextListStyle(TextListStyleType listStyleType, int level)
        {
            if (listStyleType != null)
            {
                switch (level)
                {
                    case 0: return listStyleType.Level1ParagraphProperties;
                    case 1: return listStyleType.Level2ParagraphProperties;
                    case 2: return listStyleType.Level3ParagraphProperties;
                    case 3: return listStyleType.Level4ParagraphProperties;
                    case 4: return listStyleType.Level5ParagraphProperties;
                    case 5: return listStyleType.Level6ParagraphProperties;
                    case 6: return listStyleType.Level7ParagraphProperties;
                    case 7: return listStyleType.Level8ParagraphProperties;
                    case 8: return listStyleType.Level9ParagraphProperties;
                    default: return listStyleType.Level1ParagraphProperties;

                }
            }
            else
            {
                return null;
            }
        }

        private TextParagraphPropertiesType getFromTextListStyle(ListStyle listStyleType, int level)
        {
            if (listStyleType != null)
            {
                switch (level)
                {
                    case 0: return listStyleType.Level1ParagraphProperties;
                    case 1: return listStyleType.Level2ParagraphProperties;
                    case 2: return listStyleType.Level3ParagraphProperties;
                    case 3: return listStyleType.Level4ParagraphProperties;
                    case 4: return listStyleType.Level5ParagraphProperties;
                    case 5: return listStyleType.Level6ParagraphProperties;
                    case 6: return listStyleType.Level7ParagraphProperties;
                    case 7: return listStyleType.Level8ParagraphProperties;
                    case 8: return listStyleType.Level9ParagraphProperties;
                    default: return listStyleType.Level1ParagraphProperties;

                }
            }
            else
            {
                return null;
            }
        }
        private PPTParagraph FillParagraphProperties(PPTParagraph par, TextParagraphPropertiesType baseProperties, SlidePart slidePart)
        {

            if (baseProperties.LineSpacing != null)
            {
                par.lineSpacing = baseProperties.LineSpacing;
            }
            if (baseProperties.SpaceAfter != null)
            {
                par.spaceAfter = baseProperties.SpaceAfter;
            }
            if (baseProperties.SpaceBefore != null)
            {
                par.spaceBefore = baseProperties.SpaceBefore;
            }

            if (baseProperties.Alignment != null)
            {
                par.Align = baseProperties.Alignment.Value.ToString();
            }
            if (baseProperties.FontAlignment != null)
            {
                par.FontAlign = baseProperties.FontAlignment.Value.ToString();
            }

            if (baseProperties.LeftMargin != null)
            {
                par.marginLeft = baseProperties.LeftMargin.Value / Globals.LEAST_COMMON_MULTIPLE_100_254;
            }
            if (baseProperties.RightMargin != null)
            {
                par.marginRight = baseProperties.RightMargin.Value / Globals.LEAST_COMMON_MULTIPLE_100_254;
            }

            if (baseProperties.Indent != null)
            {
                par.Indent = baseProperties.Indent.Value / Globals.LEAST_COMMON_MULTIPLE_100_254;
            }

            PPTRunProperties runProp = par.defaultRunProperties;

            runProp.ReadDefaultRunProperties(baseProperties);
            this.ReadBullets(par, baseProperties, slidePart);

            if (baseProperties.GetFirstChild<NoBullet>() != null)
            {
                par.bullet = null;
            }

            return par;
        }

        private void ReadBullets(PPTParagraph par, TextParagraphPropertiesType baseProperties, SlidePart slidePart)
        {
            var bulletProp = new PPTRunProperties(slide);
            bulletProp.isBullet = true;

            if (baseProperties != null)
            {
                if (baseProperties.GetFirstChild<CharacterBullet>() != null)
                {
                    ReadCharacterBullets(par, baseProperties, bulletProp);
                }
                else if (baseProperties.GetFirstChild<PictureBullet>() != null)
                {
                    ReadPictureBullets(par, baseProperties, bulletProp, slidePart);
                }
            }
        }

        private void ReadPictureBullets(PPTParagraph par, TextParagraphPropertiesType baseProperties, PPTRunProperties bulletProp, SlidePart slidePart)
        {
            SetBulletProperties(par, baseProperties, bulletProp);
            var picBul = baseProperties.GetFirstChild<PictureBullet>();
            if (picBul != null)
            {
                string embed = picBul.Blip.Embed.Value;

                string projectDir = System.IO.Path.GetDirectoryName(
                                    System.IO.Path.GetDirectoryName(Environment.CurrentDirectory));
                string storageDir = System.IO.Path.Combine(projectDir, Globals.STORAGE_DIR);
                string path = "";
                if (slide.slideIndex >= 1)
                {
                    path = slide.fileName + slide.slideIndex;
                }
                else
                {
                    path = slide.fileName;
                }
                string pictureBulletDir = System.IO.Path.Combine(storageDir, path);
                bulletProp.Text = path + "\\" + embed + ".png";
                try
                {
                    bulletProp.bulletSize = ExtractPictureBulletImage(bulletProp, embed, pictureBulletDir, slidePart);
                    /*  if (!Directory.Exists(pictureBulletDir))
                      {
                          Directory.CreateDirectory(pictureBulletDir);
                          bulletProp.bulletSize = ExtractPictureBulletImage(bulletProp, embed, pictureBulletDir, slidePart);
                      }
                      else
                      {
                          bulletProp.bulletSize = ExtractPictureBulletImage(bulletProp, embed, pictureBulletDir, slidePart);
                      }*/
                }
                catch (IOException iex)
                {
                    Console.WriteLine(iex.Message);
                }

                if (baseProperties.GetFirstChild<BulletSizePercentage>() != null)
                {
                    BulletSizePercentage pct = baseProperties.GetFirstChild<BulletSizePercentage>();
                    if (bulletProp.bulletSize != 0)
                    {
                        bulletProp.bulletSize = bulletProp.bulletSize * pct.Val / PercentageConstant;
                    }
                    else
                    {
                        bulletProp.bulletSize = ClearSlideLibrary.HtmlController.HtmlText.DefaultBulletSize;
                        bulletProp.bulletSize = bulletProp.bulletSize * pct.Val / PercentageConstant;
                    }
                }

                par.bullet = bulletProp;

            }
        }

        private int ExtractPictureBulletImage(PPTRunProperties bulletProp, string embed,
                                               string realDir, SlidePart slidePart)
        {
            int imageSize = 0;
            try
            {
                OpenXmlPart masterPart = slide.SlideLayoutPart.SlideMasterPart.GetPartById(embed);
                if (masterPart != null)
                {
                    if (masterPart.ContentType.Equals("image/png"))
                    {

                        var image = Image.FromStream(masterPart.GetStream());
                        var scaledImage = Globals.ScaleByPercent(image, (int)bulletProp.FontSize);
                        if (!System.IO.Directory.Exists(realDir))                        
                            System.IO.Directory.CreateDirectory(realDir);                        
                        imageSize = scaledImage.Height;
                        string imageName = System.IO.Path.Combine(realDir, embed + ".png");
                        scaledImage.Save(imageName);                       
                       
                    }
                    else
                    {
                        OpenXmlPart sldPart = slidePart.GetPartById(embed);
                        if (sldPart != null)
                        {
                            if (sldPart.ContentType.Equals("image/png"))
                            {
                                if (!System.IO.Directory.Exists(realDir))                               
                                    System.IO.Directory.CreateDirectory(realDir);
                                
                                var image = Image.FromStream(sldPart.GetStream());
                                var scaledImage = Globals.ScaleByPercent(image, (int)bulletProp.FontSize);
                                imageSize = scaledImage.Height;
                                string imageName = System.IO.Path.Combine(realDir, embed + ".png");
                                scaledImage.Save(imageName);
                            }
                        }
                    }
                }
            }
            catch (ArgumentOutOfRangeException aoex)
            {
                Console.WriteLine(aoex.Message);
            }
            catch (ArgumentException aex)
            {
                Console.WriteLine(aex.Message);
            }
            return imageSize;
        }

        private void ReadCharacterBullets(PPTParagraph par, TextParagraphPropertiesType baseProperties, PPTRunProperties bulletProp)
        {
            bulletProp.Text = "" + baseProperties.GetFirstChild<CharacterBullet>().Char;
            SetBulletProperties(par, baseProperties, bulletProp);
        }

        private void SetBulletProperties(PPTParagraph par, TextParagraphPropertiesType baseProperties, PPTRunProperties bulletProp)
        {
            BulletFont font = baseProperties.GetFirstChild<BulletFont>();
            if (font != null)
            {
                if (font.Typeface != null)
                    bulletProp.FontFamily = font.Typeface;
                if (font.PitchFamily != null)
                {
                    bulletProp.FontSize = font.PitchFamily;
                }
                else
                {
                    var latinFonts = font.GetFirstChild<LatinFont>();
                    if (latinFonts != null)
                    {
                        bulletProp.ReadFontFamilyFromTheme(latinFonts);
                    }
                }
            }
            else
            {

                bulletProp.FontSize = par.defaultRunProperties.FontSize;
            }

            bulletProp.Left = par.marginLeft;

            BulletColor buCol = baseProperties.GetFirstChild<BulletColor>();
            if (buCol != null)
            {
                if (buCol.RgbColorModelHex != null)
                {
                    bulletProp.FontColor = "#" + buCol.RgbColorModelHex.Val.Value;
                }
                else
                {
                    if (buCol.GetFirstChild<SchemeColor>() != null)
                    {
                        bulletProp.ReadThemeSchemeColor(buCol.GetFirstChild<SchemeColor>());
                    }
                }
            }
            //float points = float.Parse(bulletProp.FontSize.ToString()) * 72.0F / 96.0F;
            //bulletProp.bulletSize = ClearSlideLibrary.HtmlController.HtmlShape.MeasureString(bulletProp.Text, new System.Drawing.Font(bulletProp.FontFamily.ToString(), points)).Width;
            par.bullet = bulletProp;

        }
    }
}