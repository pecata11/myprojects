function GetCurrentXYSlide(a) {
	var b = gv.sw;
	var c = gv.sh;
	var d = parseInt(a.sV.d.style.left);
	var e = parseInt(a.sV.d.style.top);
	var f = a.sV.w;
	var g = a.sV.h;
	switch (a.c.additionalData) {
	case 1:
		a.dX = d;
		a.dY = g * -1;
		break;
	case 2:
		a.dX = b;
		a.dY = e;
		break;
	case 3:
		a.dX = d;
		a.dY = c;
		break;
	case 4:
		a.dX = f * -1;
		a.dY = e;
		break;
	case 6:
		a.dX = f * -1;
		a.dY = g * -1;
		break;
	case 7:
		a.dX = b;
		a.dY = g * -1;
		break;
	case 8:
		a.dX = b;
		a.dY = c;
		break;
	case 9:
		a.dX = f * -1;
		a.dY = c;
		break
	}
	a.fX = d;
	a.fY = e;
	if (a.c.state == 2) {
		var h = a.fY;
		a.fY = a.dY;
		a.dY = h;
		h = a.fX;
		a.fX = a.dX;
		a.dX = h
	}
}

function startAnimations() {	
	setProgress();
	playCurrent();
	play()
	
}
function gad(a) {
	clearTimeout(aatoid);
	a.v = new autoAdvance(a)
}
var caS = document.createElement("audio")
StylePpty = function () {};
StylePpty.Transform = function () {
	if (typeof this.transform == "undefined") {
		this.transform = "transform";
		var a = ["transform", "WebkitTransform", "msTransform", "MozTransform", "OTransform"];
		var b;
		var c = document.getElementsByTagName("div");
		while (b = a.shift()) {
			if (typeof c[0].style[b] != "undefined") {
				this.transform = b;
				return this.transform
			}
		}
	}
	return this.transform
};
var DocumentStyle = new function () {
	if (typeof window.getComputedStyle == "undefined") {
		this.style = function (a, b) {
			if (typeof a.tagName != "undefined")
				return a.currentStyle[b]
		}
	} else {
		this.style = function (a, b) {
			if (typeof a.tagName != "undefined")
				return document.defaultView.getComputedStyle(a, null)[b]
		}
	}
};
CalculateDimensions = function (a) {
	var childNodes = a.childNodes;
	var styletop = -1;
	var styleleft = -1;
	var dimensions = {
		height : 0,
		width : 0
	};
	for (var f = 0; f < childNodes.length; f++) {
		var g = childNodes[f];
		if (g.nodeType == 1 && g.nodeName == "PRE") {
			if (g.style.left != styleleft) {
				dimensions.width += parseFloat(g.scrollWidth);
				styleleft = g.style.left
			}
			if (g.style.top != styletop) {
				dimensions.height += parseFloat(g.scrollHeight);
				styletop = g.style.top
			}
		}
	}
	return dimensions
};
InItD = function (a) {
	this.p = a;
	if (this.p.c.e0 != 5) {
		this.d = document.getElementById(gci(this.p.c.objectId, gc));
		this.dpd = document.getElementById(gci(this.p.c.objectId, gc) + "c")
	} else {
		this.d = document.getElementById(this.p.c.objectId);
		this.dpd = document.getElementById(this.p.c.objectId + "c")
	}
	if (this.dpd == null)
		this.dpd = this.d;
	this.h = this.d.style.height ? parseFloat(this.d.style.height) : this.d.parentNode.style.height ? parseFloat(this.d.parentNode.style.height) : parseFloat(this.d.scrollHeight);
	this.w = this.d.style.width ? parseFloat(this.d.style.width) : this.d.parentNode.style.width ? parseFloat(this.d.parentNode.style.width) : parseFloat(this.d.scrollWidth);
	if (this.h == 0 || this.w == 0) {
		var b = CalculateDimensions(this.dpd);
		this.h = b.height;
		this.w = b.width;
	}
	this.l = this.d.style.left ? parseFloat(this.d.style.left) : parseFloat(this.d.parentNode.style.left);
	this.t = this.d.style.top ? parseFloat(this.d.style.top) : parseFloat(this.d.parentNode.style.top);
	this.op = parseFloat(DocumentStyle.style(this.dpd, "opacity"));
	this.st = gt;
	this.setTrasform = function () {
		this.trns = this.p.getTranslate();
		this.scl = this.p.getScale();
		this.rta = this.p.getRotate();
		this.skw = this.p.getSkewX()
	};
	this.reset = function () {
		this.d.style.height = this.h + "px";
		this.d.style.width = this.w + "px";
		this.d.style.left = this.l + "px";
		this.d.style.top = this.t + "px";
		this.dpd.style.opacity = this.op;
		this.p.setTranslate(this.trns.x, this.trns.y);
		this.p.setScale(this.scl.x, this.scl.y);
		this.p.setRotate(this.rta);
		this.p.setSkewX(this.skw)
	}
};
BaseAnimation = function (c) {
	this.c = c;
	this.blks = new Array;
	this.gtime = function () {
		var a = gt;
		if (this.c.repeat < 0 && this.rpdCnt > 0)
			a = (new Date).getTime();
		return a
	};
	this.initBaseAnimation = function (a) {
		if (typeof this.sV != "undefined")
			return false;
		this.sV = new InItD(this);
		this.sV.setTrasform();
		this.rpdCnt = 0;
		this.initT = this.st = a;
		if (typeof this.c.c6 != "undefined")
			this.aSrc = document.getElementById(this.c.c6).src;					
		return true
	};   
	this.resetBaseAnimation = function () {
		this.pozd = false;
		this.stpd = false;
		for (x in this.blks) {
			this.blks[x].pozd = false;
			this.blks[x].stpd = false
		}
	};
	this.pause = function () {
		this.pozd = true;
		for (x in this.blks)
			this.blks[x].pozd = true
	};
	this.stop = function () {
		this.pozd = false;
		this.stpd = true;
		for (x in this.blks) {
			this.blks[x].pozd = false;
			this.blks[x].stpd = true
		}
	};
	this.reset = function () {
		this.rpdCnt = 0;
		this.st = this.initT;
		this.stop();
		this.stopCurrentAnimation();
		if (typeof this.dltCv != "undefined")
			this.dltCv();
		if (typeof this.mc != "undefined")
			this.mc.cvt.clearRect(0, 0, this.w, this.h);
		if (typeof this.sV != "undefined")
			this.sV.reset();
		for (x in this.blks)
			this.blks[x].reset()
	};
	this.stopCurrentAnimation = function () {
		if (this.aSrc == caS.src && caS.canPlayType) {
			if (!caS.paused)
				caS.pause();
			if (!this.pozd)
				caS.src = null
		}
	};
	this.playCurrentAnimation = function () {
		if (!caS.canPlayType || typeof this.aSrc == "undefined" || this.aSrc == caS.src && !caS.paused)
			return;
		if (this.aSrc != caS.src)
			caS.src = this.aSrc;
		caS.play()
	};
	this.doRepeat = function () {
		this.rpdCnt++;
		if (this.rpdCnt < this.c.repeat || this.c.repeat < 0) {
			this.st = this.c.repeat < 0 ? this.gtime() : this.st + this.c.length;
			this.stopCurrentAnimation();
			this.play()
		}
	};
	this.setTranslate = function (a, b) {
		var c = StylePpty.Transform();
		var d = this.sV.d.style[c];
		var e = /translate\(+[^\)]+\)/;
		var f = "translate(" + a + "px," + b + "px)";
		if (-1 != d.search(e))
			d = d.replace(e, f);
		else if (null != d)
			d = d + f;
		this.sV.d.style[c] = d
	};
	this.getTranslate = function () {
		var a = {
			x : 0,
			y : 0
		};
		var b = StylePpty.Transform();
		var c = this.sV.d.style[b];
		var d = /translate\(+[^\)]+\)/;
		var e = c.match(d);
		if (null != e) {
			var f = e[0].match(/[0-9.-]+|[\d]+[^p]/g);
			a.x = parseFloat(f[0]);
			a.y = parseFloat(f[1])
		}
		return a
	};
	this.setScale = function (a, b) {
		var c = StylePpty.Transform();
		var d = this.sV.d.style[c];
		var e = /scale\(+[^\)]+\)/;
		var f = "scale(" + a + "," + b + ")";
		if (-1 != d.search(e))
			d = d.replace(e, f);
		else if (null != d)
			d = d + f;
		this.sV.d.style[c] = d
	};
	this.getScale = function () {
		var a = {
			x : 1,
			y : 1
		};
		var b = StylePpty.Transform();
		var c = this.sV.d.style[b];
		var d = /scale\(+[^\)]+\)/;
		var e = c.match(d);
		if (null != e) {
			var f = e[0].match(/[0-9.-]+|[\d]+[^p]/g);
			a.x = parseFloat(f[0]);
			a.y = parseFloat(f[1])
		}
		return a
	};
	this.setRotate = function (a) {
		var b = StylePpty.Transform();
		var c = this.sV.d.style[b];
		var d = /rotate\(+[^\)]+\)/;
		var e = "rotate(" + a + "deg)";
		if (-1 != c.search(d))
			c = c.replace(d, e);
		else if (null != c)
			c = c + e;
		this.sV.d.style[b] = c
	};
	this.getRotate = function () {
		var a = 0;
		var b = StylePpty.Transform();
		var c = this.sV.d.style[b];
		var d = /rotate\(+[^\)]+\)/;
		var e = c.match(d);
		if (null != e) {
			var f = e[0].match(/[0-9.-]+|[\d]+[^d]/g);
			a = parseFloat(f[0])
		}
		return a
	};
	this.setSkewX = function (a) {
		var b = StylePpty.Transform();
		var c = this.sV.d.style[b];
		var d = /skewX\(+[^\)]+\)/;
		var e = "skewX(" + a + "deg)";
		if (-1 != c.search(d))
			c = c.replace(d, e);
		else if (null != c)
			c = c + e;
		this.sV.d.style[b] = c
	};
	this.getSkewX = function () {
		var a = 0;
		var b = StylePpty.Transform();
		var c = this.sV.d.style[b];
		var d = /skewX\(+[^\)]+\)/;
		var e = c.match(d);
		if (null != e) {
			var f = e[0].match(/[0-9.-]+|[\d]+[^d]/g);
			a = parseFloat(f[0])
		}
		return a
	};
	this.playBlockAnimation = function () {
		function c() {
			if (a.pozd || a.stpd || b >= a.blks.length)
				return;
			while (1) {
				if (b >= a.blks.length)
					return;
				var d = a.blks[b];
				if (d.st <= a.gtime()) {
					d.play();
					b++
				} else
					break
			}
			Cbfun(c)
		}
		var a = this;
		if (a.at == 1)
			return;
		var b = 0;
		Cbfun(c)
	}
};
Cv = function (a, b) {
	this.cv = document.createElement("canvas");
	this.cv.height = b;
	this.cv.width = a;
	this.cvt = this.cv.getContext("2d");
	this.bdrawn = false;
	this.drawCmpltDiv = function (a, b, c) {
		var d = a.childNodes;
		var e = d.length;
		for (var f = 0; f < e; f++) {
			var g = d[f];
			if (g.nodeType != 1 || g.nodeName != "IMG")
				continue;
			var h = DocumentStyle.style(a, "height");
			var i = DocumentStyle.style(a, "width");
			var j = DocumentStyle.style(a.parentNode, "height");
			var k = DocumentStyle.style(a.parentNode, "width");
			var l = h && h != "100%" ? parseFloat(h) : parseFloat(j);
			var m = i && i != "100%" ? parseFloat(i) : parseFloat(k);
			this.cvt.drawImage(g, b, c, m, l)
		}
		for (var f = 0; f < e; f++) {
			var g = d[f];
			if (g.nodeType != 1 || g.nodeName != "PRE")
				continue;
			var n = g.style.left ? b + parseFloat(g.style.left) : b;
			var o = g.style.top ? c + parseFloat(g.style.top) : c;
			this.cvt.font = DocumentStyle.style(g, "fontStyle") + " " + DocumentStyle.style(g, "fontWeight") + " " + DocumentStyle.style(g, "fontSize") + " " + DocumentStyle.style(g, "fontFamily");
			this.cvt.fillStyle = DocumentStyle.style(g, "color");
			this.cvt.textBaseline = "top";
			this.cvt.fillText(g.innerHTML, n, o)
		}
		for (var f = 0; f < e; f++) {
			var g = d[f];
			var p = DocumentStyle.style(g, "opacity");
			if (g.nodeType != 1 || g.nodeName != "DIV" || p == "0")
				continue;
			var q = DocumentStyle.style(g, "left");
			var r = DocumentStyle.style(g, "top");
			var n = q ? b + parseFloat(q) : 0;
			var o = r ? c + parseFloat(r) : 0;
			this.drawCmpltDiv(g, n, o)
		}
		this.bdrawn = true
	};
	this.drawDiv = function (a) {
		var b = a.getElementsByTagName("img");
		var c = new Image;
		var d = this;
		if (b.length > 0)
			c.src = b[0].src;
		else
			this.drawText(a);
		c.onload = function () {
			d.cvt.drawImage(c, 0, 0, c.width, c.height, 0, 0, d.cv.width, d.cv.height);
			d.drawText(a)
		}
	};
	this.drawText = function (a) {
		var b = a.getElementsByTagName("pre");
		var c = b.length;
		for (var d = 0; d < c; d++) {
			var e = b[d];
			this.cvt.font = DocumentStyle.style(e, "fontStyle") + " " + DocumentStyle.style(e, "fontWeight") + " " + DocumentStyle.style(e, "fontSize") + " " + DocumentStyle.style(e, "fontFamily");
			this.cvt.fillStyle = DocumentStyle.style(e, "color");
			this.cvt.textBaseline = "bottom";
			this.cvt.fillText(e.innerHTML, parseFloat(e.style.left), parseFloat(e.style.top) + e.scrollHeight)
		}
		this.bdrawn = true
	};
	this.apndTo = function (a) {
	    a.appendChild(this.cv)
	};
	this.draw = function (a, b) {
	    if (a.bdrawn) {
	        if (b)
	            this.cvt.clearRect(0, 0, this.cv.width, this.cv.height);
	        this.cvt.drawImage(a.cv, 0, 0)
	    }
	}
};
MskAnim = function (a) {
	this.inheritFrom = BaseAnimation;
	this.inheritFrom(a);
	this.initMskAnim = function (a) {
		if (this.initBaseAnimation(a)) {
			this.h = this.sV.h;
			this.w = this.sV.w;
			this.im = new Image;
			this.bgcv = new Cv(this.w, this.h);
			this.frcv = new Cv(this.w, this.h);
			if (this.c.state == -1)
				this.bgcv.drawCmpltDiv(this.sV.d, 0, 0);
			else
				this.bgcv.drawDiv(this.sV.dpd);
			this.fct = this.frcv.cvt;
			this.cp = "destination-in";
			if (this.c.state == 2)
				this.cp = "destination-out";
			return true
		} else
			return false
	};
	this.resetMskAnim = function () {
		if (!this.pozd) {
			if (this.c.state == -1)
				this.frcv.apndTo(this.sV.d.parentNode);
			else
				this.frcv.apndTo(this.sV.d)
		}
		this.resetBaseAnimation()
	};
	this.doAfterEffect = function () {
		if (this.c.state == -1) {
			this.sV.d.style.opacity = 1;
			this.reset()
		}
	};
	this.dltCv = function () {
		try {
			if (this.c.state == 2)
				this.sV.dpd.style.opacity = 0;
			if (this.c.state == 1)
				this.sV.dpd.style.opacity = 1;
			this.fct.clearRect(0, 0, this.w, this.h);
			if (this.c.state == -1)
				this.sV.d.parentNode.removeChild(this.frcv.cv);
			else
				this.sV.d.removeChild(this.frcv.cv)
		} catch (a) {}

	}
};

EaseOut = EaseIn = function (a) {
	this.inheritFrom = MskAnim;
	this.inheritFrom(a);
	this.Initialize = function (a) {
		if (this.initMskAnim(a)) {
			this.trDiff = 140
		}
	}
};
EaseOut.prototype.play = EaseIn.prototype.play = function () {
	function b() {
		if (a.pozd || a.stpd) {
			a.stopCurrentAnimation();
			return
		}
		var c = a.gtime() - a.st - a.c.start;
		if (c <= 0) {
			if (Math.abs(c) > a.c.start)
				a.reset();
			else
				Cbfun(b);
			return
		}
		a.playCurrentAnimation();
		if (a.c.state == 1) {
			var d = c >= a.c.length ? a.w : a.w / a.c.length * c;
			var e = a.trDiff * (1 - d / a.w);
			a.sV.dpd.style.opacity = 0;
			a.fct.save();
			a.fct.clearRect(0, 0, a.w, a.h);
			a.mc.cvt.save();
			a.mc.cvt.clearRect(0, 0, a.w, a.h);
			a.mc.cvt.drawImage(a.bgcv.cv, a.w - d, 0);
			a.mc.cvt.restore();
			a.mc.bdrawn = true;
			a.frcv.draw(a.mc, false);
			a.fct.restore();
			a.setTranslate(-e, 0)
		} else if (a.c.state == 2) {
			var e = c >= a.c.length ? 0 : a.trDiff / a.c.length * c;
			var f = c >= a.c.length ? 0 : 1 - 1 / a.c.length * c;
			a.sV.dpd.style.opacity = f;
			a.setTranslate(-e, 0)
		}
		if (c >= a.c.length) {
			a.dltCv();
			a.doRepeat();
			return
		}
		Cbfun(b)
	}
	this.resetMskAnim();
	this.playBlockAnimation();
	var a = this;
	Cbfun(b);
};
FlyIn = FlyOut = CrawlOut = CrawlIn = function (a) {	
	this.inheritFrom = BaseAnimation;
	this.inheritFrom(a);
	this.Initialize = function (a) {
		if (this.initBaseAnimation(a)) {
			GetCurrentXYSlide(this);
			this.xDif = this.fX - this.dX;
			this.yDif = this.fY - this.dY;
			this.mX = this.xDif / this.c.length;
			this.mY = this.yDif / this.c.length;
		}
	}
};
FlyIn.prototype.play = FlyOut.prototype.play = CrawlIn.prototype.play = CrawlOut.prototype.play = function () {
	function b() {
		if (a.pozd || a.stpd) {
			a.stopCurrentAnimation();
			return
		}
		var c = a.gtime() - a.st - a.c.start;
		if (c <= 0) {
			if (Math.abs(c) > a.c.start) {
				a.reset()
			} else {
				Cbfun(b)
			}
			return
		}
		if (a.animStarted == false) {
			a.animStarted = true;
			if (a.c.state == 2) {
				var d = a.getTranslate();
				if (a.left == null)
					a.left = a.sV.d.style.left = parseInt(a.sV.d.style.left) + d.x + "px";
				else
					a.sV.d.style.left = a.left;
				if (a.top == null)
					a.top = a.sV.d.style.top = parseInt(a.sV.d.style.top) + d.y + "px";
				else
					a.sV.d.style.top = a.top;
				GetCurrentXYSlide(a);
				a.xDif = a.fX - parseInt(a.sV.d.style.left);
				a.yDif = a.fY - parseInt(a.sV.d.style.top);
				a.mX = a.xDif / a.c.length;
				a.mY = a.yDif / a.c.length
			} else {
				a.sV.d.style.left = this.dx + "px";
				a.sV.d.style.top = this.dx + "py";
				a.setTranslate(-1 * this.xDif, -1 * this.yDif)
			}
			a.sV.dpd.style.opacity = 1
		}
		a.playCurrentAnimation();
		var e = 0;
		var f = 0;
		if (a.c.state == 1) {
			e = c * a.mX - a.cX;
			f = c * a.mY - a.cY
		} else {
			e = c * a.mX;
			f = c * a.mY
		}
		a.setTranslate(e, f);
		if (c >= a.c.length) {
			if (a.c.state == 1) {
				a.setTranslate(0, 0)
			} else {
				a.sV.dpd.style.opacity = 0;
				a.setTranslate(0, 0)
			}
			a.doRepeat();
			return
		}
		Cbfun(b)
	}
	this.resetBaseAnimation();
	this.playBlockAnimation();
	this.cX = this.xDif;
	this.cY = this.yDif;
	this.pt = 0;
	var a = this;
	this.animStarted = false;
	Cbfun(b);
};
Fade = function (a) {
	this.inheritFrom = BaseAnimation;
	this.inheritFrom(a);
	this.Initialize = function (a) {
		if (this.initBaseAnimation(a)) {
			this.mO = 1 / this.c.length
		}
	}
};
Fade.prototype.play = function () {
	function b() {
		if (a.pozd || a.stpd) {
			a.stopCurrentAnimation();
			return
		}
		var c = a.gtime() - a.st - a.c.start;
		if (c <= 0) {
			if (Math.abs(c) > a.c.start) {
				a.reset()
			} else {
				Cbfun(b)
			}
			return
		}
		a.playCurrentAnimation();
		if (a.animStarted == false) {
			a.animStarted = true;
			if (a.c.state == 2)
				a.oF = 0;
			else
				a.oF = 1
		}
		var d = c * a.mO;
		if (a.oF == 0)
			a.sV.dpd.style.opacity = 1 - d;
		else
			a.sV.dpd.style.opacity = d;
		if (c >= a.c.length) {
			a.sV.dpd.style.opacity = a.oF;
			a.doRepeat();
			return
		}
		Cbfun(b)
	}
	this.resetBaseAnimation();
	this.playBlockAnimation();
	this.animStarted = false;
	var a = this;
	Cbfun(b);
};
FadedZoom = function (a) {
	this.inheritFrom = BaseAnimation;
	this.inheritFrom(a);
	this.Initialize = function (a) {
		if (this.initBaseAnimation(a)) {
			this.mO = 1 / this.c.length;
			this.mS = 1 / this.c.length;
			if (this.c.state != 2) {
				this.fO = 1;
				this.fSCale = 1
			} else {
				this.mO = this.mO * -1;
				this.fO = 0;
				this.fSCale = 0
			}
		}
	}
};
FadedZoom.prototype.play = function () {
	function b() {
		if (a.pozd || a.stpd) {
			a.stopCurrentAnimation();
			return
		}
		var c = a.gtime() - a.st - a.c.start;
		if (c <= 0) {
			if (Math.abs(c) > a.c.start) {
				a.reset()
			} else {
				Cbfun(b)
			}
			return
		}
		a.playCurrentAnimation();
		var d;
		var e = 0;
		if (a.fO == 0) {
			d = 1 - c * a.mS;
			e = 1 - c * a.mO * -1
		} else {
			d = c * a.mS;
			e = c * a.mO
		}
		a.sV.dpd.style.opacity = e;
		a.setScale(d, d);
		if (c >= a.c.length) {
			a.sV.dpd.style.opacity = a.fO;
			a.setScale(1, 1);
			a.doRepeat();
			return
		}
		Cbfun(b)
	}
	this.resetBaseAnimation();
	this.playBlockAnimation();
	var a = this;
	Cbfun(b);
};
RiseUp = SinkDown = function (a) {
	this.inheritFrom = BaseAnimation;
	this.inheritFrom(a);
	this.Initialize = function (a) {
		if (this.initBaseAnimation(a)) {
			var b = gv.sh;
			var c = parseInt(this.sV.d.style.top);
			var d = parseInt(this.sV.h);
			this.dY = b - c + 20;
			this.yDif1 = this.dY / (this.c.length * .9);
			this.yDif2 = 20 / (this.c.length * .1);
			this.oDif = 1 / this.c.length
		}
	}
};
RiseUp.prototype.play = SinkDown.prototype.play = function () {
	function b() {
		if (a.pozd || a.stpd) {
			a.stopCurrentAnimation();
			return
		}
		var c = a.gtime() - a.st - a.c.start;
		if (c <= 0) {
			if (Math.abs(c) > a.c.start)
				a.reset();
			else
				Cbfun(b);
			return
		}
		a.playCurrentAnimation();
		if (a.bStdAnm == false && a.c.state == 1) {
			a.sV.dpd.style.opacity = 1;
			a.setTranslate(0, a.dY - 20);
			a.bStdAnm = true
		}
		var d;
		var e = c / a.c.length * 100;
		var f = 0;
		if (a.c.state == 1) {
			if (e < 90) {
				var g = (c - a.c.length * .1) / (a.c.length * .9) * 90;
				var h = Math.cos(Math.PI / 180 * g);
				var f = h * (a.c.length * .9 - c) * a.yDif1
			} else {
				f = (c - a.c.length * .9) * a.yDif2
			}
			a.setTranslate(0, f - 20);
			d = c * a.oDif
		} else {
			if (e < 10) {
				var f =  - (c * a.yDif2)
			} else {
				var g = (c - a.c.length * .1) / (a.c.length * .9) * 90;
				var h = Math.cos(Math.PI / 180 * g);
				f = a.dY - a.dY * h - 20
			}
			a.setTranslate(0, f);
			d = 1 - c * a.oDif
		}
		a.sV.dpd.style.opacity = d;
		if (c >= a.c.length) {
			if (a.c.state == 2)
				a.sV.dpd.style.opacity = 0;
			a.setTranslate(0, 0);
			a.doRepeat();
			return
		}
		Cbfun(b)
	}
	this.resetBaseAnimation();
	this.playBlockAnimation();
	this.bStdAnm = false;
	var a = this;
	Cbfun(b);
};
autoAdvance = function (a) {
	this.play = function () {};
	this.pause = function () {};
	this.reset = function () {};
	this.stop = function () {}

};
